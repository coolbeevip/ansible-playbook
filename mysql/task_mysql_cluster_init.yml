- name: include vars
  include_vars: "vars_mysql.yml"

# 检查集群状态
- name: check mysql_cluster_status
  shell: "source ~/.bash_profile && mysqlsh --password='{{ mysql_user_root_password }}' root@{{ inventory_hostname }}:{{ mysqld_port }} -- cluster status"
  register: check_result
  check_mode: no
  ignore_errors: true
- name: check mysql_cluster_status output
  debug:
    var: check_result.stdout_lines

# 如果不存在集群，则生成集群初始化脚本
- name: delete mysql_cluster_init.sql file
  file:
    path: "{{ mysql_script_dir }}/mysql_cluster_init.sql"
    state: absent
  check_mode: no
  when: check_result.rc == 1
- name: create mysql_cluster_init.sql file
  lineinfile:
    dest: "{{ mysql_script_dir }}/mysql_cluster_init.sql"
    line: "{{ item }}"
    state: present
    create: true
  with_items: |
    shell.connect('root@{{ inventory_hostname }}:{{ mysqld_port }}', '{{ mysql_user_root_password }}')
    shell.options['dba.restartWaitTimeout']=7200
    dba.createCluster('{{ cluster_name }}', {'localAddress': '{{ inventory_hostname }}'})
    var cluster=dba.getCluster('{{ cluster_name }}')
  check_mode: no
  when: check_result.rc == 1
- name: add slave script to mysql_cluster_init.sql
  lineinfile:
    dest: "{{ mysql_script_dir }}/mysql_cluster_init.sql"
    line: "cluster.addInstance('root@{{ item }}:{{ mysqld_port }}', {'localAddress': '{{ item }}', 'password': '{{ mysql_user_root_password }}','recoveryMethod':'clone','waitRecovery':'1'})"
    state: present
    create: true
  with_items: "{{ cluster_members_slaves }}"
  check_mode: no
  when: check_result.rc == 1

# 初始化集群
- name: init mysql cluster
  shell: "source ~/.bash_profile && mysqlsh --no-password < {{ mysql_script_dir }}/mysql_cluster_init.sql"
  check_mode: no
  register: init_cluster_result
  when: check_result.rc == 1
- name: init mysql cluster result
  debug:
    var: init_cluster_result.stdout_lines
  when: check_result.rc == 1

#
# # 检查集群状态
# - name: check mysql_cluster_status
#   shell: "source ~/.bash_profile && mysqlsh --password='{{ mysql_user_root_password }}' root@{{ inventory_hostname }}:{{ mysqld_port }} -- cluster status"
#   register: check_result
#   check_mode: no
# - name: check mysql_cluster_status output
#   debug:
#     var: check_result.stdout_lines
