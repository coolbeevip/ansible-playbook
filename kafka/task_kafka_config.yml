- name: include vars
  include_vars: "vars_kafka.yml"

# Configure Kafka server.properties
- name: Configure Kafka broker.id
  lineinfile:
    dest: "{{ kafka_home_dir }}/{{ kafka_tar_unzip_dir }}/config/server.properties"
    regexp: "^broker.id=.*"
    line: "broker.id={{ hosts[inventory_hostname].kafka_broker_id }}"
    state: present
  check_mode: no
- name: Configure Kafka listeners
  lineinfile:
    dest: "{{ kafka_home_dir }}/{{ kafka_tar_unzip_dir }}/config/server.properties"
    regexp: '^#listeners=.*'
    line: "listeners=PLAINTEXT://{{ inventory_hostname }}:{{ kafka_server_port }}"
    state: present
  check_mode: no
  when: not kafka_jaas.enabled
- name: Configure Kafka log.dirs
  lineinfile:
    dest: "{{ kafka_home_dir }}/{{ kafka_tar_unzip_dir }}/config/server.properties"
    regexp: '^log.dirs=.*'
    line: "log.dirs={{ kafka_log_dirs | join(',') }}"
    state: present
  check_mode: no
- name: Configure Kafka num.partitions
  lineinfile:
    dest: "{{ kafka_home_dir }}/{{ kafka_tar_unzip_dir }}/config/server.properties"
    regexp: '^num.partitions=.*'
    line: "num.partitions={{ kafka_server_num_partitions }}"
    state: present
  check_mode: no
- name: Configure Kafka offsets.topic.replication.factor
  lineinfile:
    dest: "{{ kafka_home_dir }}/{{ kafka_tar_unzip_dir }}/config/server.properties"
    regexp: '^offsets.topic.replication.factor=.*'
    line: "offsets.topic.replication.factor={{ kafka_server_offsets_topic_replication_factor }}"
    state: present
  check_mode: no
- name: Configure Kafka transaction.state.log.replication.factor
  lineinfile:
    dest: "{{ kafka_home_dir }}/{{ kafka_tar_unzip_dir }}/config/server.properties"
    regexp: '^transaction.state.log.replication.factor=.*'
    line: "transaction.state.log.replication.factor={{ kafka_server_transaction_state_log_replication_factor }}"
    state: present
  check_mode: no
- name: Configure Kafka transaction.state.log.min.isr
  lineinfile:
    dest: "{{ kafka_home_dir }}/{{ kafka_tar_unzip_dir }}/config/server.properties"
    regexp: '^transaction.state.log.min.isr=.*'
    line: "transaction.state.log.min.isr={{ kafka_server_transaction_state_log_min_isr }}"
    state: present
  check_mode: no
- name: Configure Kafka default.replication.factor
  lineinfile:
    dest: "{{ kafka_home_dir }}/{{ kafka_tar_unzip_dir }}/config/server.properties"
    regexp: '^default.replication.factor=.*'
    line: "default.replication.factor={{ kafka_server_default_replication_factor }}"
    state: present
  check_mode: no
- name: Configure Kafka min.insync.replicas
  lineinfile:
    dest: "{{ kafka_home_dir }}/{{ kafka_tar_unzip_dir }}/config/server.properties"
    regexp: '^min.insync.replicas=.*'
    line: "min.insync.replicas={{ kafka_server_min_insync_replicas }}"
    state: present
  check_mode: no
- name: Configure Kafka zookeeper.connection.timeout.ms
  lineinfile:
    dest: "{{ kafka_home_dir }}/{{ kafka_tar_unzip_dir }}/config/server.properties"
    regexp: '^zookeeper.connection.timeout.ms=.*'
    line: "zookeeper.connection.timeout.ms={{ kafka_server_zookeeper_connection_timeout_ms }}"
    state: present
  check_mode: no
- name: Configure Kafka log.retention.hours
  lineinfile:
    dest: "{{ kafka_home_dir }}/{{ kafka_tar_unzip_dir }}/config/server.properties"
    regexp: '^log.retention.hours=.*'
    line: "log.retention.hours={{ kafka_server_log_retention_hours }}"
    state: present
  check_mode: no
- name: Configure Kafka max.request.size
  lineinfile:
    dest: "{{ kafka_home_dir }}/{{ kafka_tar_unzip_dir }}/config/server.properties"
    regexp: '^max.request.size=.*'
    line: "max.request.size={{ kafka_server_max_request_size }}"
    state: present
  check_mode: no
- set_fact:
    zookeeper_connect: |
      {% set res = [] %}{% for key in hosts.keys() %}{{ res.append(key + ":" + zookeeper_client_port | string ) }}{% endfor %}{{ res | join(',') }}
- name: Configure Kafka zookeeper.connect
  lineinfile:
    dest: "{{ kafka_home_dir }}/{{ kafka_tar_unzip_dir }}/config/server.properties"
    regexp: '^zookeeper.connect=.*'
    line: "zookeeper.connect={{ zookeeper_connect }}"
    state: present
  check_mode: no

# Kafka producer.properties
- set_fact:
    bootstrap_servers: |
      {% set res = [] %}{% for key in hosts.keys() %}{{ res.append(key + ":" + kafka_server_port | string ) }}{% endfor %}{{ res | join(',') }}
- name: Configure Kafka producer bootstrap.servers
  lineinfile:
    dest: "{{ kafka_home_dir }}/{{ kafka_tar_unzip_dir }}/config/producer.properties"
    regexp: '^bootstrap.servers=.*'
    line: "bootstrap.servers={{ bootstrap_servers }}"
    state: present
  check_mode: no
- name: Configure Kafka producer security.protocol
  lineinfile:
    dest: "{{ kafka_home_dir }}/{{ kafka_tar_unzip_dir }}/config/producer.properties"
    regexp: '^security.protocol=.*'
    line: "security.protocol=SASL_PLAINTEXT"
    state: present
  check_mode: no
- name: Configure Kafka producer sasl.mechanism
  lineinfile:
    dest: "{{ kafka_home_dir }}/{{ kafka_tar_unzip_dir }}/config/producer.properties"
    regexp: '^sasl.mechanism=.*'
    line: "sasl.mechanism=PLAIN"
    state: present
  check_mode: no
- name: Configure Kafka producer sasl.jaas.config
  lineinfile:
    dest: "{{ kafka_home_dir }}/{{ kafka_tar_unzip_dir }}/config/producer.properties"
    regexp: '^sasl.jaas.config=.*'
    line: "sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username='{{ kafka_jaas.client_server.username }}' password='{{ kafka_jaas.client_server.password }}';"
    state: present
  check_mode: no

# Kafka consumer.properties
- name: Configure Kafka consumer bootstrap.servers
  lineinfile:
    dest: "{{ kafka_home_dir }}/{{ kafka_tar_unzip_dir }}/config/consumer.properties"
    regexp: '^bootstrap.servers=.*'
    line: "bootstrap.servers={{ bootstrap_servers }}"
    state: present
  check_mode: no
- name: Configure Kafka consumer security.protocol
  lineinfile:
    dest: "{{ kafka_home_dir }}/{{ kafka_tar_unzip_dir }}/config/consumer.properties"
    regexp: '^security.protocol=.*'
    line: "security.protocol=SASL_PLAINTEXT"
    state: present
  check_mode: no
- name: Configure Kafka consumer sasl.mechanism
  lineinfile:
    dest: "{{ kafka_home_dir }}/{{ kafka_tar_unzip_dir }}/config/consumer.properties"
    regexp: '^sasl.mechanism=.*'
    line: "sasl.mechanism=PLAIN"
    state: present
  check_mode: no
- name: Configure Kafka consumer sasl.jaas.config
  lineinfile:
    dest: "{{ kafka_home_dir }}/{{ kafka_tar_unzip_dir }}/config/consumer.properties"
    regexp: '^sasl.jaas.config=.*'
    line: "sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username='{{ kafka_jaas.client_server.username }}' password='{{ kafka_jaas.client_server.password }}';"
    state: present
  check_mode: no


# Kafka authentication
- name: Configure Kafka listeners sasl
  lineinfile:
    dest: "{{ kafka_home_dir }}/{{ kafka_tar_unzip_dir }}/config/server.properties"
    regexp: '^listeners=.*'
    line: "listeners=SASL_PLAINTEXT://{{ inventory_hostname }}:{{ kafka_server_port }}"
    state: present
  check_mode: no
  when: kafka_jaas.enabled
- name: Configure Kafka advertised.listeners
  lineinfile:
    dest: "{{ kafka_home_dir }}/{{ kafka_tar_unzip_dir }}/config/server.properties"
    regexp: '^advertised.listeners=.*'
    line: "advertised.listeners=SASL_PLAINTEXT://{{ inventory_hostname }}:{{ kafka_server_port }}"
    state: present
  check_mode: no
  when: kafka_jaas.enabled
- name: Configure Kafka security.inter.broker.protocol
  lineinfile:
    dest: "{{ kafka_home_dir }}/{{ kafka_tar_unzip_dir }}/config/server.properties"
    regexp: '^security.inter.broker.protocol=.*'
    line: "security.inter.broker.protocol=SASL_PLAINTEXT"
    state: present
  check_mode: no
  when: kafka_jaas.enabled
- name: Configure Kafka sasl.mechanism.inter.broker.protocol
  lineinfile:
    dest: "{{ kafka_home_dir }}/{{ kafka_tar_unzip_dir }}/config/server.properties"
    regexp: '^sasl.mechanism.inter.broker.protocol=.*'
    line: "sasl.mechanism.inter.broker.protocol=PLAIN"
    state: present
  check_mode: no
  when: kafka_jaas.enabled
- name: Configure Kafka sasl.enabled.mechanismss
  lineinfile:
    dest: "{{ kafka_home_dir }}/{{ kafka_tar_unzip_dir }}/config/server.properties"
    regexp: '^sasl.enabled.mechanisms=.*'
    line: "sasl.enabled.mechanisms=PLAIN"
    state: present
  check_mode: no
  when: kafka_jaas.enabled
- name: Configure Kafka authorizer.class.name
  lineinfile:
    dest: "{{ kafka_home_dir }}/{{ kafka_tar_unzip_dir }}/config/server.properties"
    regexp: '^authorizer.class.name=.*'
    line: "authorizer.class.name=kafka.security.auth.SimpleAclAuthorizer"
    state: present
  check_mode: no
  when: kafka_jaas.enabled
- name: Configure Kafka super.users
  lineinfile:
    dest: "{{ kafka_home_dir }}/{{ kafka_tar_unzip_dir }}/config/server.properties"
    regexp: '^super.users=.*'
    line: "super.users=User:{{ kafka_jaas.server_server.username }}"
    state: present
  check_mode: no
  when: kafka_jaas.enabled

# Kafka remove authentication
- name: Configure Kafka remove authentication
  lineinfile:
    dest: "{{ kafka_home_dir }}/{{ kafka_tar_unzip_dir }}/config/server.properties"
    regexp: "{{ item }}"
    state: absent
  check_mode: no
  loop:
    - ^authorizer.class.name=.*
    - ^security.inter.broker.protocol=.*
    - ^sasl.mechanism.inter.broker.protocol=.*
    - ^sasl.enabled.mechanisms=.*
  when: not kafka_jaas.enabled

# Kafka remove authentication consumer.properties
- name: Configure Kafka remove consumer properties
  lineinfile:
    dest: "{{ kafka_home_dir }}/{{ kafka_tar_unzip_dir }}/config/consumer.properties"
    regexp: "{{ item }}"
    state: absent
  check_mode: no
  loop:
    - ^security.protocol=.*
    - ^sasl.mechanism=.*
    - ^sasl.jaas.config=.*
  when: not kafka_jaas.enabled

# Kafka remove authentication consumer.properties
- name: Configure Kafka remove producer properties
  lineinfile:
    dest: "{{ kafka_home_dir }}/{{ kafka_tar_unzip_dir }}/config/producer.properties"
    regexp: "{{ item }}"
    state: absent
  check_mode: no
  loop:
    - ^security.protocol=.*
    - ^sasl.mechanism=.*
    - ^sasl.jaas.config=.*
  when: not kafka_jaas.enabled
# Create a Topic for Test
