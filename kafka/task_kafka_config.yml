- name: include vars
  include_vars: "vars_kafka.yml"

# Configure Zookeeper IDs
- name: Configure Zookeeper Ids
  shell: echo "{{ hosts[inventory_hostname].zookeeper_id }}" > {{ zookeeper_data_dir }}/myid
  check_mode: no

# Configure zookeeper.properties
- name: Configure Zookeeper initLimit
  lineinfile:
    dest: "{{ kafka_home_dir }}/{{ kafka_tar_unzip_dir }}/config/zookeeper.properties"
    regexp: "^initLimit=.*"
    line: "initLimit={{ zookeeper_init_limit }}"
    state: present
  check_mode: no
- name: Configure Zookeeper tickTime
  lineinfile:
    dest: "{{ kafka_home_dir }}/{{ kafka_tar_unzip_dir }}/config/zookeeper.properties"
    regexp: "^tickTime=.*"
    line: "tickTime={{ zookeeper_tick_time }}"
    state: present
  check_mode: no
- name: Configure Zookeeper syncLimit
  lineinfile:
    dest: "{{ kafka_home_dir }}/{{ kafka_tar_unzip_dir }}/config/zookeeper.properties"
    regexp: "^syncLimit=.*"
    line: "syncLimit={{ zookeeper_sync_limit }}"
    state: present
  check_mode: no
- name: Configure Zookeeper dataDir
  lineinfile:
    dest: "{{ kafka_home_dir }}/{{ kafka_tar_unzip_dir }}/config/zookeeper.properties"
    regexp: "^dataDir=.*"
    line: "dataDir={{ zookeeper_data_dir }}"
    state: present
  check_mode: no
- name: Configure Zookeeper dataLogDir
  lineinfile:
    dest: "{{ kafka_home_dir }}/{{ kafka_tar_unzip_dir }}/config/zookeeper.properties"
    regexp: "^dataLogDir=.*"
    line: "dataLogDir={{ zookeeper_datalog_dir }}"
    state: present
  check_mode: no
- name: Configure Zookeeper servers ip and internal ports to zookeeper
  lineinfile:
    dest: "{{ kafka_home_dir }}/{{ kafka_tar_unzip_dir }}/config/zookeeper.properties"
    regexp: '^server.{{ hosts[item].zookeeper_id }}=.*'
    line: "server.{{ hosts[item].zookeeper_id }}={{ item }}:{{ zookeeper_follower_port }}:{{ zookeeper_election_port }}"
    state: present
  with_items: "{{ hosts.keys() | list }}"
  check_mode: no
- name: Configure Zookeeper 4lw.commands.whitelist
  lineinfile:
    dest: "{{ kafka_home_dir }}/{{ kafka_tar_unzip_dir }}/config/zookeeper.properties"
    regexp: "^4lw.commands.whitelist=.*"
    line: "4lw.commands.whitelist={{ four_letter_word_whitelist }}"
    state: present
  check_mode: no

# Zookeeper authentication client-server
- name: Configure Zookeeper authentication
  lineinfile:
    dest: "{{ kafka_home_dir }}/{{ kafka_tar_unzip_dir }}/config/zookeeper.properties"
    regexp: "^authProvider.1=.*"
    line: "authProvider.1=org.apache.zookeeper.server.auth.SASLAuthenticationProvider"
    state: present
  check_mode: no
  when: zookeeper_authentication.enabled
- name: Configure Zookeeper sessionRequireClientSASLAuth
  lineinfile:
    dest: "{{ kafka_home_dir }}/{{ kafka_tar_unzip_dir }}/config/zookeeper.properties"
    regexp: "^sessionRequireClientSASLAuth=.*"
    line: "sessionRequireClientSASLAuth=true"
    state: present
  check_mode: no
  when: zookeeper_authentication.enabled

# Zookeeper authentication server-server
- name: Configure Zookeeper quorum.auth.enableSasl
  lineinfile:
    dest: "{{ kafka_home_dir }}/{{ kafka_tar_unzip_dir }}/config/zookeeper.properties"
    regexp: "^quorum.auth.enableSasl=.*"
    line: "quorum.auth.enableSasl=true"
    state: present
  check_mode: no
  when: zookeeper_authentication.enabled
- name: Configure Zookeeper quorum.auth.learnerRequireSasl
  lineinfile:
    dest: "{{ kafka_home_dir }}/{{ kafka_tar_unzip_dir }}/config/zookeeper.properties"
    regexp: "^quorum.auth.learnerRequireSasl=.*"
    line: "quorum.auth.learnerRequireSasl=true"
    state: present
  check_mode: no
  when: zookeeper_authentication.enabled
- name: Configure Zookeeper quorum.auth.serverRequireSasl
  lineinfile:
    dest: "{{ kafka_home_dir }}/{{ kafka_tar_unzip_dir }}/config/zookeeper.properties"
    regexp: "^quorum.auth.serverRequireSasl=.*"
    line: "quorum.auth.serverRequireSasl=true"
    state: present
  check_mode: no
  when: zookeeper_authentication.enabled
- name: Configure Zookeeper quorum.auth.learner.loginContext
  lineinfile:
    dest: "{{ kafka_home_dir }}/{{ kafka_tar_unzip_dir }}/config/zookeeper.properties"
    regexp: "^quorum.auth.learner.loginContext=.*"
    line: "quorum.auth.learner.loginContext=QuorumLearner"
    state: present
  check_mode: no
  when: zookeeper_authentication.enabled
- name: Configure Zookeeper quorum.auth.server.loginContext
  lineinfile:
    dest: "{{ kafka_home_dir }}/{{ kafka_tar_unzip_dir }}/config/zookeeper.properties"
    regexp: "^quorum.auth.server.loginContext=.*"
    line: "quorum.auth.server.loginContext=QuorumServer"
    state: present
  check_mode: no
  when: zookeeper_authentication.enabled
- name: Configure Zookeeper quorum.cnxn.threads.size
  lineinfile:
    dest: "{{ kafka_home_dir }}/{{ kafka_tar_unzip_dir }}/config/zookeeper.properties"
    regexp: "^quorum.cnxn.threads.size=.*"
    line: "quorum.cnxn.threads.size=6"
    state: present
  check_mode: no
  when: zookeeper_authentication.enabled

# Zookeeper remove authentication
- name: Configure Zookeeper remove authentication
  lineinfile:
    dest: "{{ kafka_home_dir }}/{{ kafka_tar_unzip_dir }}/config/zookeeper.properties"
    regexp: "{{ item }}"
    state: absent
  check_mode: no
  loop:
    - ^requireClientAuthScheme=.*
    - ^authProvider.*
    - ^quorum.auth.*
    - ^quorum.cnxn.threads.size=.*
  when: not zookeeper_authentication.enabled

# Configure Kafka server.properties
- name: Configure Kafka broker.id
  lineinfile:
    dest: "{{ kafka_home_dir }}/{{ kafka_tar_unzip_dir }}/config/server.properties"
    regexp: "^broker.id=.*"
    line: "broker.id={{ hosts[inventory_hostname].kafka_broker_id }}"
    state: present
  check_mode: no
- name: Configure Kafka listeners
  lineinfile:
    dest: "{{ kafka_home_dir }}/{{ kafka_tar_unzip_dir }}/config/server.properties"
    regexp: '^#listeners=.*'
    line: "listeners=PLAINTEXT://{{ inventory_hostname }}:{{ kafka_server_port }}"
    state: present
  check_mode: no
- name: Configure Kafka log.dirs
  lineinfile:
    dest: "{{ kafka_home_dir }}/{{ kafka_tar_unzip_dir }}/config/server.properties"
    regexp: '^log.dirs=.*'
    line: "log.dirs={{ kafka_log_dirs | join(',') }}"
    state: present
  check_mode: no
- name: Configure Kafka num.partitions
  lineinfile:
    dest: "{{ kafka_home_dir }}/{{ kafka_tar_unzip_dir }}/config/server.properties"
    regexp: '^num.partitions=.*'
    line: "num.partitions={{ kafka_server_num_partitions }}"
    state: present
  check_mode: no
- name: Configure Kafka offsets.topic.replication.factor
  lineinfile:
    dest: "{{ kafka_home_dir }}/{{ kafka_tar_unzip_dir }}/config/server.properties"
    regexp: '^offsets.topic.replication.factor=.*'
    line: "offsets.topic.replication.factor={{ kafka_server_offsets_topic_replication_factor }}"
    state: present
  check_mode: no
- name: Configure Kafka transaction.state.log.replication.factor
  lineinfile:
    dest: "{{ kafka_home_dir }}/{{ kafka_tar_unzip_dir }}/config/server.properties"
    regexp: '^transaction.state.log.replication.factor=.*'
    line: "transaction.state.log.replication.factor={{ kafka_server_transaction_state_log_replication_factor }}"
    state: present
  check_mode: no
- name: Configure Kafka transaction.state.log.min.isr
  lineinfile:
    dest: "{{ kafka_home_dir }}/{{ kafka_tar_unzip_dir }}/config/server.properties"
    regexp: '^transaction.state.log.min.isr=.*'
    line: "transaction.state.log.min.isr={{ kafka_server_transaction_state_log_min_isr }}"
    state: present
  check_mode: no
- name: Configure Kafka default.replication.factor
  lineinfile:
    dest: "{{ kafka_home_dir }}/{{ kafka_tar_unzip_dir }}/config/server.properties"
    regexp: '^default.replication.factor=.*'
    line: "default.replication.factor={{ kafka_server_default_replication_factor }}"
    state: present
  check_mode: no
- name: Configure Kafka min.insync.replicas
  lineinfile:
    dest: "{{ kafka_home_dir }}/{{ kafka_tar_unzip_dir }}/config/server.properties"
    regexp: '^min.insync.replicas=.*'
    line: "min.insync.replicas={{ kafka_server_min_insync_replicas }}"
    state: present
  check_mode: no
- name: Configure Kafka zookeeper.connection.timeout.ms
  lineinfile:
    dest: "{{ kafka_home_dir }}/{{ kafka_tar_unzip_dir }}/config/server.properties"
    regexp: '^zookeeper.connection.timeout.ms=.*'
    line: "zookeeper.connection.timeout.ms={{ kafka_server_zookeeper_connection_timeout_ms }}"
    state: present
  check_mode: no
- name: Configure Kafka log.retention.hours
  lineinfile:
    dest: "{{ kafka_home_dir }}/{{ kafka_tar_unzip_dir }}/config/server.properties"
    regexp: '^log.retention.hours=.*'
    line: "log.retention.hours={{ kafka_server_log_retention_hours }}"
    state: present
  check_mode: no
- name: Configure Kafka max.request.size
  lineinfile:
    dest: "{{ kafka_home_dir }}/{{ kafka_tar_unzip_dir }}/config/server.properties"
    regexp: '^max.request.size=.*'
    line: "max.request.size={{ kafka_server_max_request_size }}"
    state: present
  check_mode: no
- set_fact:
    zookeeper_connect: |
      {% set res = [] %}{% for key in hosts.keys() %}{{ res.append(key + ":" + zookeeper_client_port | string ) }}{% endfor %}{{ res | join(',') }}
- name: Configure Kafka zookeeper.connect
  lineinfile:
    dest: "{{ kafka_home_dir }}/{{ kafka_tar_unzip_dir }}/config/server.properties"
    regexp: '^zookeeper.connect=.*'
    line: "zookeeper.connect={{ zookeeper_connect }}"
    state: present
  check_mode: no

# Create a Topic for Test
